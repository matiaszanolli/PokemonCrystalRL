#!/usr/bin/env python3
"""
SDL Driver Fix for Pokemon Crystal RL

This script detects SDL2/NVIDIA driver issues and applies appropriate fixes.
Run before training to ensure stable PyBoy operation.
"""

import os
import sys
import subprocess
import platform

def detect_nvidia_driver():
    """Check if NVIDIA drivers are present and potentially problematic"""
    try:
        result = subprocess.run(['nvidia-smi'], capture_output=True, text=True)
        if result.returncode == 0:
            print("✅ NVIDIA GPU detected")
            # Extract driver version
            for line in result.stdout.split('\n'):
                if 'Driver Version:' in line:
                    driver_version = line.split('Driver Version:')[1].split()[0]
                    print(f"🔍 Driver version: {driver_version}")
                    return True, driver_version
        return False, None
    except FileNotFoundError:
        print("ℹ️ No NVIDIA drivers detected")
        return False, None

def test_sdl_driver(driver_name):
    """Test if an SDL driver works by trying to initialize PyBoy"""
    print(f"🧪 Testing SDL driver: {driver_name}")
    
    env = os.environ.copy()
    env['SDL_VIDEODRIVER'] = driver_name
    
    # Quick test script
    test_script = '''
import sys
sys.path.insert(0, ".")
try:
    from pyboy import PyBoy
    pyboy = PyBoy("../roms/pokemon_crystal.gbc", window="null")
    pyboy.tick()  # Just one frame
    pyboy.stop()
    print("SUCCESS")
except Exception as e:
    print(f"FAILED: {e}")
    sys.exit(1)
'''
    
    try:
        result = subprocess.run([
            sys.executable, '-c', test_script
        ], capture_output=True, text=True, env=env, timeout=10)
        
        if result.returncode == 0 and "SUCCESS" in result.stdout:
            print(f"✅ Driver {driver_name} works!")
            return True
        else:
            print(f"❌ Driver {driver_name} failed: {result.stderr.strip()}")
            return False
    except subprocess.TimeoutExpired:
        print(f"⏱️ Driver {driver_name} timed out")
        return False
    except Exception as e:
        print(f"🚫 Driver {driver_name} error: {e}")
        return False

def apply_fix():
    """Apply the appropriate SDL driver fix"""
    print("🔧 Pokemon Crystal RL - SDL Driver Fix")
    print("=" * 50)
    
    has_nvidia, driver_version = detect_nvidia_driver()
    
    if has_nvidia:
        print("⚠️ NVIDIA GPU detected - potential SDL2/OpenGL conflicts")
        print("   This can cause segmentation faults in PyBoy")
        print()
    
    # Test drivers in order of preference
    drivers_to_test = []
    
    if platform.system() == "Linux":
        drivers_to_test = ["dummy", "x11", "wayland"]
    else:
        drivers_to_test = ["dummy"]
    
    working_driver = None
    
    for driver in drivers_to_test:
        if test_sdl_driver(driver):
            working_driver = driver
            break
    
    if working_driver:
        print(f"\n🎯 Recommended SDL driver: {working_driver}")
        
        # Create environment setup
        env_setup = f"""
# SDL Driver Fix for Pokemon Crystal RL
# Automatically generated by fix_sdl_driver.py
export SDL_VIDEODRIVER={working_driver}
"""
        
        # Write to a source-able file
        with open('.pokemon_rl_env', 'w') as f:
            f.write(env_setup)
        
        print(f"📝 Environment setup written to .pokemon_rl_env")
        print(f"   Run: source .pokemon_rl_env")
        print(f"   Or add to ~/.bashrc: echo 'export SDL_VIDEODRIVER={working_driver}' >> ~/.bashrc")
        
        # Also set for current session
        os.environ['SDL_VIDEODRIVER'] = working_driver
        print(f"✅ SDL_VIDEODRIVER set to {working_driver} for current session")
        
        return working_driver
    else:
        print("❌ No working SDL driver found!")
        print("   This may indicate a more serious system issue.")
        return None

def main():
    """Main function"""
    if len(sys.argv) > 1 and sys.argv[1] == "--test":
        # Just run a test without modifying anything
        print("🧪 Testing current SDL configuration...")
        success = test_sdl_driver(os.environ.get('SDL_VIDEODRIVER', 'auto'))
        if success:
            print("✅ Current SDL configuration works!")
            return 0
        else:
            print("❌ Current SDL configuration has issues")
            return 1
    
    working_driver = apply_fix()
    
    if working_driver:
        print(f"\n🚀 Ready to train! SDL driver: {working_driver}")
        print("   You can now run pokemon_trainer.py safely")
        return 0
    else:
        print("\n🚨 Could not find a working configuration")
        print("   Please check your system setup and dependencies")
        return 1

if __name__ == "__main__":
    sys.exit(main())
